name: Check for new release and build Zen Browser
on:
  schedule:
    - cron: '0 0 * * *'   # Run daily at midnight UTC
  workflow_dispatch:      # Allow manual runs

permissions:
  contents: write
  packages: write

jobs:
  check-for-new-release:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.get_latest_release.outputs.tag_name }}
      should_build: ${{ steps.check_local_tag.outputs.should_build }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Get all tags
          
      - name: Get the latest release from Zen Browser
        id: get_latest_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use GitHub CLI which handles authentication automatically
          tag_name=$(gh release view --repo zen-browser/desktop --json tagName --jq '.tagName')
          if [ -z "$tag_name" ] || [ "$tag_name" = "null" ]; then
            echo "Error: Could not get latest release tag name"
            exit 1
          fi
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
          echo "Latest version: $tag_name"

      - name: Check if the release exists locally
        id: check_local_tag
        run: |
          if git rev-parse "refs/tags/v${{ steps.get_latest_release.outputs.tag_name }}" >/dev/null 2>&1; then
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.get_latest_release.outputs.tag_name }} already exists locally. Skipping build."
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "No matching release found. Proceeding with build."
          fi

      - name: Set up build environment
        if: steps.check_local_tag.outputs.should_build == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip

      - name: Grant execution permissions to build script
        if: steps.check_local_tag.outputs.should_build == 'true'
        run: chmod +x ./zenmake_all_platforms.sh

      - name: Run the build script
        if: steps.check_local_tag.outputs.should_build == 'true'
        run: ./zenmake_all_platforms.sh

      - name: Verify build artifacts
        if: steps.check_local_tag.outputs.should_build == 'true'
        run: |
          for file in zen-linux-x86_64-portable.zip zen-linux-aarch64-portable.zip zen-windows-x86_64-portable.zip zen-windows-arm64-portable.zip zen-macos-universal-portable.zip zen-portable.zip; do
            if [ ! -f "$file" ]; then
              echo "Error: Build artifact $file is missing"
              exit 1
            fi
          done

      - name: Create GitHub Release
        if: steps.check_local_tag.outputs.should_build == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating release v${{ steps.get_latest_release.outputs.tag_name }}..."
          gh release create "v${{ steps.get_latest_release.outputs.tag_name }}" \
            zen-linux-x86_64-portable.zip \
            zen-linux-aarch64-portable.zip \
            zen-windows-x86_64-portable.zip \
            zen-windows-arm64-portable.zip \
            zen-macos-universal-portable.zip \
            zen-portable.zip \
            --title "Zen Browser v${{ steps.get_latest_release.outputs.tag_name }}" \
            --notes "Automated build for release v${{ steps.get_latest_release.outputs.tag_name }}
          
          Supported Platforms:
          
          Linux:
          - zen-linux-x86_64-portable.zip (x86_64 64-bit)
          - zen-linux-aarch64-portable.zip (aarch64 ARM 64-bit)
          
          Windows:
          - zen-windows-x86_64-portable.zip (x86_64 64-bit)
          - zen-windows-arm64-portable.zip (ARM64)
          
          macOS:
          - zen-macos-universal-portable.zip (Universal - Intel and Apple Silicon)
          
          Universal:
          - zen-portable.zip (All platforms in one package)
          
          Each package is fully portable and includes launchers for easy use." \
            --repo ${{ github.repository }}
